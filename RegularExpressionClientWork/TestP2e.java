package RegularExpressionClientWork;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class TestP2e {

    static String [] testdata ={
            "a+b",
            "c+1",
            "2+d",
            "3+4",
            "A+B",
            "C+-1",
            "-2+D",
            "-3+-4",
            "a +b",
            "c+ 1",
            " 2+d",
            "3+4 ",
            " A +B",
            " C+ -1",
            " -2+D ",
            "-3 + -4",
            "e1 +F2 ",
            " G3 + h4",
            " __c +$$d ",
            " __c+ $$d ",
            "_$a + -567 ",
            " -23 + -456 ",
            // double the spaces
            "a  +b",
            "c+  1",
            "  2+d",
            "3+4  ",
            " A  +B",
            " C+  -1",
            "  -2+D  ",
            "-3  +  -4",
            "e1  +F2  ",
            "  G3  +  h4",
            "  __c  +$$d  ",
            "  __c+  $$d  ",
            "_$a  +  -567  ",
            "  -23  +  -456  ",
            // do the other operators and work in \t, \r, \n
            "a/b",
            "c/1",
            "2/d",
            "3/4",
            "A/B",
            "C/-1",
            "-2/D",
            "-3/-4",
            "a /b",
            "c/ 1",
            " 2/d",
            "3/4\r ",
            " A\t /B",
            " C/ \n-1",
            "\t -2/D\r ",
            "-3\r\r /\t\t -4",
            "e1\n\n /F2\r\r ",
            " G3 \t/ \rh4",
            " __c \n/$$d ",
            " __c/\n\r\t $$d ",
            "_$a / \r\n\t-567 ",
            " -23\t \r \n /\r \n \t -456 ",
            "a  /b",
            "c/  1",
            "  2/d",
            "3/4  ",
            " A  /B",
            " C/  -1",
            "  -2/D  ",
            "-3  /  -4",
            "e1  /F2  ",
            "  G3  /  h4",
            "  __c  /$$d  ",
            "  __c/  $$d  ",
            "_$a  /  -567  ",
            "  -23  /  -456  ",
            "a*b",
            "c*1",
            "2*d",
            "3*4",
            "A*B",
            "C*-1",
            "-2*D",
            "-3*-4",
            "a *b",
            "c* 1",
            " 2*d",
            "3*4 ",
            " A *B",
            " C* -1",
            " -2*D ",
            "-3 * -4",
            "3*4\r ",
            " A\t *B",
            " C* \n-1",
            "\t -2*D\r ",
            "-3\r\r *\t\t -4",
            "e1\n\n *F2\r\r ",
            " G3 \t* \rh4",
            " __c \n*$$d ",
            " __c*\n\r\t $$d ",
            "_$a * \r\n\t-567 ",
            " -23\t \r \n *\r \n \t -456 ",

            "e1 *F2 ",
            " G3 * h4",
            " __c *$$d ",
            " __c* $$d ",
            "_$a * -567 ",
            " -23 * -456 ",
            "a  *b",
            "c*  1",
            "  2*d",
            "3*4  ",
            " A  *B",
            " C*  -1",
            "  -2*D  ",
            "-3  *  -4",
            "e1  *F2  ",
            "  G3  *  h4",
            "  __c  *$$d  ",
            "  __c*  $$d  ",
            "_$a  *  -567  ",
            "  -23  *  -456  ",

            "a%b",
            "c%1",
            "2%d",
            "3%4",
            "A%B",
            "C%-1",
            "-2%D",
            "-3%-4",
            "a %b",
            "c% 1",
            " 2%d",
            "3%4 ",
            " A %B",
            " C% -1",
            " -2%D ",
            "-3 % -4",
            "e1 %F2 ",
            " G3 % h4",
            " __c %$$d ",
            " __c% $$d ",
            "_$a % -567 ",
            " -23 % -456 ",
            "3%4\r ",
            " A\t %B",
            " C% \n-1",
            "\t -2%D\r ",
            "-3\r\r %\t\t -4",
            "e1\n\n %F2\r\r ",
            " G3 \t% \rh4",
            " __c \n%$$d ",
            " __c%\n\r\t $$d ",
            "_$a % \r\n\t-567 ",
            " -23\t \r \n %\r \n \t -456 ",
            "a  %b",
            "c%  1",
            "  2%d",
            "3%4  ",
            " A  %B",
            " C%  -1",
            "  -2%D  ",
            "-3  %  -4",
            "e1  %F2  ",
            "  G3  %  h4",
            "  __c  %$$d  ",
            "  __c%  $$d  ",
            "_$a  %  -567  ",
            "  -23  %  -456  ",
            // longer expressions with multiple operators
            "1+2+3+4+5+6+7+8+9+0",
            "1/2*3%4+5%6*7/8+9+0",
            "1+2*3+4+5+6+7+8+9+0",
            "1+2+3%4+5+6+7+8+9+0",
            "1+2+3+4*5+6+7+8+9+0",
            "1+2+3+4+5/6+7+8+9+0",
            "1+2+3+4+5+6*7+8+9+0",
            "1+2+3+4+5+6+7%8+9+0",
            "1/2/3/4/5/6/7/8/9/0",
            "1%2%3%4%5%6%7%8%9%0",
            "-1*2*3*4*5*6*7*8*9*0",
            "1+-2+3+4+5+6+7+8+9+0",
            "1/2*-3%4+5%6*7/8+9+0",
            "1+2*3+-4+5+6+7+8+9+0",
            "1+2+3%4+-5+6+7+8+9+0",
            "1+2+3+4*5+-6+7+8+9+0",
            "1+2+3+4+5/6+-7+8+9+0",
            "1+2+3+4+5+6*7+-8+9+0",
            "1+2+3+4+5+6+7%8+-9+0",
            "1/2/3/4/5/6/7/8/9/-0",
            "a%2%3%4%5%6%7%8%9%0",
            "1*b*3*4*5*6*7*8*9*0",
            "1+2+c+4+5+6+7+8+9+0",
            "1/2*3%c+5%6*7/8+9+0",
            "1+2*3+4+e+6+7+8+9+0",
            "1+2+3%4+5+b+7+8+9+0",
            "1+2+3+4*5+6+g+8+9+0",
            "1+2+3+4+5/6+7+h+9+0",
            "1+2+3+4+5+6*7+8+i+0",
            "1+2+3+4+5+6+7%8+9+j",
            "A/2/3/4/5/6/7/8/9/0",
            "1%B%3%4%5%6%7%8%9%0",
            "1*2*C*4*5*6*7*8*9*0",
            "1+2+3+D+5+6+7+8+9+0",
            "1/2*3%4+E%6*7/8+9+0",
            "1+2*3+4+5+F+7+8+9+0",
            "1+2+3%4+5+6+G+8+9+0",
            "1+2+3+4*5+6+7+H+9+0",
            "1+2+3+4+5/6+7+8+I+0",
            "1+2+3+4+5+6*7+8+9+J",
            "$a%2%3%4%5%6%7%8%9%0",
            "1*_b*3*4*5*6*7*8*9*0",
            "1+2+$$c+4+5+6+7+8+9+0",
            "1/2*3%$_D+5%6*7/8+9+0",
            "1+2*3+4+_$e+6+7+8+9+0",
            "1+2+3%4+5+__b+7+8+9+0",
            "1+2+3+4*5+6+g+8+9+0",
            "1+2+3+4+5/6+$G1+7+h+9+0",
            "1+2+3+4+5+6*7+8+_i2+0",
            "1+2+3+4+5+6+7%8+9+___j",
            "A/B/C/D/E/F/G/H/I/J",
            "1%B%3%4%5%6%7%8%9%0",
            "1*2*C*4*5*6*7*8*9*0",
            "1+2+3+D+5+6+7+8+9+0",
            // add some ws(I'll just use ' ', \n, \r and \t)
            " 1 +2+3+4+5+6+7+8+9+0",
            "\t1 +2+3+4+5+6+7+8+9+0",
            "\r1 +2+3+4+5+6+7+8+9+0",
            "\n1 +2+3+4+5+6+7+8+9+0",
            "1 +2+3+4+5+6+7+8+9+0",
            "1/\t2*3%4+5%6*7/8+9+0",
            "1+2*\r3+4+5+6+7+8+9+0",
            "1+2\n+3%4+5+6+7+8+9+0",
            "1+2+ 3+4*5+6+7+8+9+0",
            "1+2+3\t+4+5/6+7+8+9+0",
            "1+2+3+\r4+5+6*7+8+9+0",
            "1+2+3+4\n+5+6+7%8+9+0",
            "1/2/3/4/ 5/6/7/8/9/0",
            "1%2%3%4%5\t%6%7%8%9%0",
            "-1*2*3*4*5*\r6*7*8*9*0",
            "1+-2+3+4+5+6\n+7+8+9+0",
            "1/2*-3%4+5%6* 7/8+9+0",
            "1+2*3+-4+5+6+7\t+8+9+0",
            "1+2+3%4+-5+6+7+\r8+9+0",
            "1+2+3+4*5+-6+7+8\n+9+0",
            "1+2+3+4+5/6+-7+8+ 9+0",
            "1+2+3+4+5+6*7+-8+9\t+0",
            "1+2+3+4+5+6+7%8+-9+\r0",
            "1/2/3/4/5/6/7/8/9/-0\n",
            "1/2/3/4/5/6/7/8/9/-0\t",
            "1/2/3/4/5/6/7/8/9/-0\r",
            "1/2/3/4/5/6/7/8/9/-0 ",
            "a\t  %2%3%4%5%6%7%8%9%0",
            "1* \r b*3*4*5*6*7*8*9*0",
            "1+2  \n+c+4+5+6+7+8+9+0",
            "1/2* \t 3%c+5%6*7/8+9+0",
            "1+2*3  \r+4+e+6+7+8+9+0",
            "1+2+3%\n  4+5+b+7+8+9+0",
            "1+2+3+4 \t *5+6+g+8+9+0",
            "1+2+3+4+   \t5/6+7+h+9+0",
            "1+2+3+4+5 \t +6*7+8+i+0",
            "1+2+3+4+5+ \r 6+7%8+9+j",
            "A/2/3/4/5/6 \n /7/8/9/0",
            "1%B%3%4%5%6%\t  7%8%9%0",
            "1*2*C*4*5*6*7\r  *8*9*0",
            "1+2+3+D+5+6+7+\n  8+9+0",
            "1/2*3%4+E%6*7/8\t\t\t+9+0",
            "1+2*3+4+5+F+7+8+\r\r\r9+0",
            "1+2+3%4+5+6+G+8+9\n\n\n+0",
            "1+2+3+4*5+6+7+H+9+0\t\t\t",
            "1+2+3+4*5+6+7+H+9+0\r\r\r",
            "1+2+3+4*5+6+7+H+9+0\n\n\n",
            "1+2+3+4*5+6+7+H+9+0 \t \r \n",
            "\t   1+2+3+4+5+6*7+8+9+J",
            " \r  1+2+3+4+5+6*7+8+9+J",
            "   \n1+2+3+4+5+6*7+8+9+J",
            "\t\t\t1+2+3+4+5+6*7+8+9+J",
            "\r\r\r1+2+3+4+5+6*7+8+9+J",
            "\t  $a  \r% \n 2\r\r\t%\t \r \n3 \n\r\t  %\t\t\t4\r\r\r%\n\n\n5\r  %\n  6  \n%\t\t7\n\n%\r8\t% 9\r%\t0\n",
            "\t  $a  \r* \n 2\r\r\t*\t \r \n3 \n\r\t  *\t\t\t4\r\r\r*\n\n\n5\r  *\n  6  \n*\t\t7\n\n*\r8\t* 9\r*\t0\n",
            "\t  $a  \r/ \n 2\r\r\t/\t \r \n3 \n\r\t  /\t\t\t4\r\r\r/\n\n\n5\r  /\n  6  \n/\t\t7\n\n/\r8\t/ 9\r/\t0\n",
            "\t  $a  \r+ \n 2\r\r\t+\t \r \n3 \n\r\t  +\t\t\t4\r\r\r+\n\n\n5\r  +\n  6  \n+\t\t7\n\n+\r8\t+ 9\r+\t0\n",
            "\t  $a  \r% \n 2\r\r\t+\t \r \n3 \n\r\t  /\t\t\t4\r\r\r*\n\n\n5\r  %\n  6  \n+\t\t7\n\n/\r8\t% 9\r*\t0\n",
            "\t  $a  \r+ \n 2\r\r\t/\t \r \n3 \n\r\t  *\t\t\t4\r\r\r%\n\n\n5\r  +\n  6  \n/\t\t7\n\n*\r8\t% 9\r+\t0\n",
            "\t  $a  \r/ \n 2\r\r\t*\t \r \n3 \n\r\t  %\t\t\t4\r\r\r+\n\n\n5\r  /\n  6  \n*\t\t7\n\n%\r8\t+ 9\r/\t0\n",
            "\t  $a  \r* \n 2\r\r\t%\t \r \n3 \n\r\t  +\t\t\t4\r\r\r/\n\n\n5\r  *\n  6  \n%\t\t7\n\n+\r8\t/ 9\r*\t0\n",

            // some simple valid expressions
            "1 + 2",
            "3 + a",
            "b + 4",
            "c + d",
            "1 - 2",
            "3 - a",
            "b - 4",
            "c - d",
            "1 * 2",
            "3 * a",
            "b * 4",
            "c * d",
            "1 / 2",
            "3 / a",
            "b / 4",
            "c / d",
            "1 % 2",
            "3 % a",
            "b % 4",
            "c % d"
    };






    public static void main (String[] args) {

        for (String s : testdata){
            System.out.println(isArithmaticExp(s)+"                                 :"+substEscapes(s));

        }
    }
    private static boolean isArithmaticExp(String  str){

//        Pattern pattern = Pattern.compile("((([-]?[1-9]\\d*|0)|((?=.*[a-zA-Z])[a-zA-z[_$]&&[^\\s0-9]]+[\\w$_]*))[-\\+\\*%/])+(([-]?[1-9]\\d*|0)|((?=.*[a-zA-Z])[a-zA-z[_$]&&[^\\s0-9]]+[\\w$_]*))");

        Pattern pattern = Pattern.compile("([\\s\\r\\t\\n]*(([-]?[1-9]\\d*|0)|((?=.*[a-zA-Z])[a-zA-z[_$]&&[^\\s0-9]]+[\\w$_]*))[\\s\\r\\t\\n]*[-\\+\\*%/])*[\\s\\r\\t\\n]*(([-]?[1-9]\\d*|0)|((?=.*[a-zA-Z])[a-zA-z[_$]&&[^\\s0-9]]+[\\w$_]*))[\\s\\r\\t\\n]*");

        Matcher matcher = pattern.matcher(str);
        boolean f = matcher.matches();
        return f;
    }


private static String substEscapes(String s){
/*

replaces some of the \s whitespace characters with
the escape sequences used for them and adds single quotes
around the string to make white space visible in
the display.

It also replaces null with the empty string, which will
NOT have the single quotes around it.

*/
        if (s == null)
        return "";

        StringBuilder b = new StringBuilder();

        char[] A = s.toCharArray();
        char c;

        int
        i,
        len = A.length;

        b.append('\'');
        for (i = 0; i < len; i++){
        c = A[i];
        if (c == '\t')
        b.append("\\t");
        else  if (c == '\r')
        b.append("\\r");
        else  if (c == '\n')
        b.append("\\n");
        else  if (c == '\f')
        b.append("\\f");
        else  if (c == '\b')
        b.append("\\b");
        else
        b.append(c);
        }
        // add the final \' to mark the end of the string
        b.append('\'');
        return b.toString();
        }
}
